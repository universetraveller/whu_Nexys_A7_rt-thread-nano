diff --git a/src/bsp/board.c b/src/bsp/board.c
index 55d92f9..74ccb0f 100644
--- a/src/bsp/board.c
+++ b/src/bsp/board.c
@@ -12,37 +12,7 @@
 #include <stdint.h>
 #include <rthw.h>
 #include <rtthread.h>
-
-#define _SCB_BASE       (0xE000E010UL)
-#define _SYSTICK_CTRL   (*(rt_uint32_t *)(_SCB_BASE + 0x0))
-#define _SYSTICK_LOAD   (*(rt_uint32_t *)(_SCB_BASE + 0x4))
-#define _SYSTICK_VAL    (*(rt_uint32_t *)(_SCB_BASE + 0x8))
-#define _SYSTICK_CALIB  (*(rt_uint32_t *)(_SCB_BASE + 0xC))
-#define _SYSTICK_PRI    (*(rt_uint8_t  *)(0xE000ED23UL))
-
-// Updates the variable SystemCoreClock and must be called 
-// whenever the core clock is changed during program execution.
-extern void SystemCoreClockUpdate(void);
-
-// Holds the system core clock, which is the system clock 
-// frequency supplied to the SysTick timer and the processor 
-// core clock.
-extern uint32_t SystemCoreClock;
-
-static uint32_t _SysTick_Config(rt_uint32_t ticks)
-{
-    if ((ticks - 1) > 0xFFFFFF)
-    {
-        return 1;
-    }
-    
-    _SYSTICK_LOAD = ticks - 1; 
-    _SYSTICK_PRI = 0xFF;
-    _SYSTICK_VAL  = 0;
-    _SYSTICK_CTRL = 0x07;  
-    
-    return 0;
-}
+#include "port_utils.h"
 
 #if defined(RT_USING_USER_MAIN) && defined(RT_USING_HEAP)
 #define RT_HEAP_SIZE 1024
@@ -58,17 +28,35 @@ RT_WEAK void *rt_heap_end_get(void)
 }
 #endif
 
+FUNC_ADD_RET(init_uart, int, 0)
+FUNC_ADD_RET(init_interrupts, int, 0)
+FUNC_ADD_RET(register_timer_handler, int, 0)
+FUNC_ADD_RET(disable_hw_timer_interrupts, int, 0)
+FUNC_ADD_RET(init_timer_period, int, 0)
+FUNC_ADD_RET(timer_setup_init, int, 0)
+
+// Behaviour of INIT_BOARD_EXPORT macros is equivalent to the following function
+// The registered functions seem to be called in reversed order
+//  void init_directly(void)
+//  {
+//      init_uart();
+//      init_interrupts();
+//      register_timer_handler();
+//      disable_hw_timer_interrupts();
+//      init_timer_period();
+//  }
+INIT_BOARD_EXPORT(NAME_FUNC_ADD_RET(init_timer_period, 0));
+INIT_BOARD_EXPORT(NAME_FUNC_ADD_RET(disable_hw_timer_interrupts, 0));
+INIT_BOARD_EXPORT(NAME_FUNC_ADD_RET(register_timer_handler, 0));
+INIT_BOARD_EXPORT(NAME_FUNC_ADD_RET(init_interrupts, 0));
+INIT_BOARD_EXPORT(NAME_FUNC_ADD_RET(init_uart, 0));
+INIT_DEVICE_EXPORT(NAME_FUNC_ADD_RET(timer_setup_init, 0));
+
 /**
  * This function will initial your board.
  */
 void rt_hw_board_init()
 {
-    /* System Clock Update */
-    SystemCoreClockUpdate();
-    
-    /* System Tick Configuration */
-    _SysTick_Config(SystemCoreClock / RT_TICK_PER_SECOND);
-
     /* Call components board initial (use INIT_BOARD_EXPORT()) */
 #ifdef RT_USING_COMPONENTS_INIT
     rt_components_board_init();
@@ -79,7 +67,7 @@ void rt_hw_board_init()
 #endif
 }
 
-void SysTick_Handler(void)
+void hw_tick_handler(void)
 {
     /* enter interrupt */
     rt_interrupt_enter();
@@ -89,3 +77,10 @@ void SysTick_Handler(void)
     /* leave interrupt */
     rt_interrupt_leave();
 }
+
+void rt_hw_console_output(const char *str)
+{
+    char* ctrl = (char*)str;
+    for ( ; *ctrl; ctrl++) 
+      hw_print_char(*ctrl);
+}
\ No newline at end of file
diff --git a/src/bsp/link.lds b/src/bsp/link.lds
index 4123ef4..ac3107a 100644
--- a/src/bsp/link.lds
+++ b/src/bsp/link.lds
@@ -65,6 +65,10 @@ SECTIONS
     *(COMRV_TEXT_ASM)
     *(.gnu.linkonce.t.*)
     . = ALIGN(4);
+    __rt_init_start = .;
+    KEEP(*(SORT(.rti_fn*)))
+    __rt_init_end = .;
+    . = ALIGN(4);
   } >ram : ram_load
 
 
diff --git a/src/bsp/rtconfig.h b/src/bsp/rtconfig.h
index 66800f2..7cb3744 100644
--- a/src/bsp/rtconfig.h
+++ b/src/bsp/rtconfig.h
@@ -5,6 +5,8 @@
 
 #include <rtthread.h>
 
+#define IDLE_THREAD_STACK_SIZE 1024
+
 #if defined(__CC_ARM) || defined(__CLANG_ARM)
 #include "RTE_Components.h"
 
@@ -28,6 +30,7 @@
 // <o>the max length of object name<2-16>
 //  <i>Default: 8
 #define RT_NAME_MAX    8
+//#define RT_USING_CUSTOM_BOOTSTRAP
 // <c1>Using RT-Thread components initialization
 //  <i>Using RT-Thread components initialization
 #define RT_USING_COMPONENTS_INIT
@@ -37,7 +40,7 @@
 
 // <o>the stack size of main thread<1-4086>
 //  <i>Default: 512
-#define RT_MAIN_THREAD_STACK_SIZE     256
+#define RT_MAIN_THREAD_STACK_SIZE     1024
 
 // </h>
 
@@ -77,7 +80,7 @@
 #define RT_TIMER_THREAD_PRIO        4
 // <o>The stack size of timer thread <0-8192>
 //  <i>Default: 512
-#define RT_TIMER_THREAD_STACK_SIZE  512
+#define RT_TIMER_THREAD_STACK_SIZE  1024
 // </e>
 
 // <h>IPC(Inter-process communication) Configuration
diff --git a/src/bsp/startup.S b/src/bsp/startup.S
index 850009e..2aa5545 100644
--- a/src/bsp/startup.S
+++ b/src/bsp/startup.S
@@ -119,7 +119,7 @@ _start:
     li a0, 0
     li a1, 0
 
-    call main
+    call entry
     
     #[OS]: no need for exit, just endless loop here.....was: tail atexit
   # loop here
diff --git a/src/libcpu/context_gcc.S b/src/libcpu/context_gcc.S
index f28b153..fdba71e 100644
--- a/src/libcpu/context_gcc.S
+++ b/src/libcpu/context_gcc.S
@@ -16,22 +16,6 @@
 #define rt_hw_interrupt_enable  rt_hw_local_irq_enable
 #endif
 
-/*
- * rt_base_t rt_hw_interrupt_disable(void);
- */
-    .globl rt_hw_interrupt_disable
-rt_hw_interrupt_disable:
-    csrrci a0, mstatus, 8
-    ret
-
-/*
- * void rt_hw_interrupt_enable(rt_base_t level);
- */
-    .globl rt_hw_interrupt_enable
-rt_hw_interrupt_enable:
-    csrw mstatus, a0
-    ret
-
 /*
  * #ifdef RT_USING_SMP
  * void rt_hw_context_switch_to(rt_ubase_t to, stuct rt_thread *to_thread);
@@ -150,6 +134,7 @@ rt_hw_context_switch_interrupt:
 
 #endif
 
+
 .global rt_hw_context_switch_exit
 rt_hw_context_switch_exit:
 #ifdef RT_USING_SMP
diff --git a/src/libcpu/cpuport.c b/src/libcpu/cpuport.c
index 3c0b75b..6451c2b 100644
--- a/src/libcpu/cpuport.c
+++ b/src/libcpu/cpuport.c
@@ -13,6 +13,9 @@
 
 #include "cpuport.h"
 
+#include "psp_api.h"
+#include "bsp_printf.h"
+
 #ifndef RT_USING_SMP
 volatile rt_ubase_t  rt_interrupt_from_thread = 0;
 volatile rt_ubase_t  rt_interrupt_to_thread   = 0;
@@ -90,11 +93,26 @@ rt_uint8_t *rt_hw_stack_init(void       *tentry,
     frame->epc     = (rt_ubase_t)tentry;
 
     /* force to machine mode(MPP=11) and set MPIE to 1 */
-    frame->mstatus = 0x00007880;
+    frame->mstatus = 0x00001880;
 
     return stk;
 }
 
+// Porting on Nexys A7
+rt_base_t rt_hw_interrupt_disable(void)
+{
+    u32_t level;
+    pspInterruptsDisable(&level);
+    return level;
+}
+
+void rt_hw_interrupt_enable(rt_base_t level)
+{
+    pspInterruptsRestore(level);
+}
+
+// end Porting on Nexys A7
+
 /*
  * #ifdef RT_USING_SMP
  * void rt_hw_context_switch_interrupt(void *context, rt_ubase_t from, rt_ubase_t to, struct rt_thread *to_thread);
@@ -111,6 +129,9 @@ void rt_hw_context_switch_interrupt(rt_ubase_t from, rt_ubase_t to)
     rt_interrupt_to_thread = to;
     rt_thread_switch_interrupt_flag = 1;
 
+#ifdef RT_USING_ECALL
+    M_PSP_ECALL();
+#endif
     return ;
 }
 #endif /* end of RT_USING_SMP */
diff --git a/src/libcpu/cpuport.h b/src/libcpu/cpuport.h
index 954b9db..0b64109 100644
--- a/src/libcpu/cpuport.h
+++ b/src/libcpu/cpuport.h
@@ -11,7 +11,7 @@
 #ifndef CPUPORT_H__
 #define CPUPORT_H__
 
-#include <rtconfig.h>
+//#include <rtconfig.h>
 
 /* bytes of register width  */
 #ifdef ARCH_CPU_64BIT
diff --git a/src/libcpu/psp_vect_instrumented.S b/src/libcpu/psp_vect_instrumented.S
index 468e003..f336067 100644
--- a/src/libcpu/psp_vect_instrumented.S
+++ b/src/libcpu/psp_vect_instrumented.S
@@ -26,6 +26,7 @@
 #include "psp_core_base.inc"
 #include "psp_macros.inc"
 #include "psp_int_vect_eh1.inc"
+#include "cpuport.inc"
 
 #ifdef __clang__
 /* disable warning for reserved registers use - we are using comrv
@@ -43,8 +44,8 @@ This implementation supports riscv privileged v1.10
 
 .ifndef D_PSP_VECT_TABLE
 psp_vect_table:
-    M_PSP_PUSH_REGFILE
-    /* NatiR - TO DO - add indication of enter to Interrupt context (call it M_PSP_SET_INT_CONTEXT) */
+    M_RT_PUSH_REGFILE
+    M_RT_BEFORE_HANDLE rt_interrupt_enter
     csrr    t0, mcause
     bge     t0, zero, psp_vect_table_
     slli    t0, t0, 2
@@ -86,51 +87,35 @@ psp_vect_table:
 
 psp_exceptions_int:
 .ifdef D_PSP_VECT_TABLE
-    M_PSP_PUSH_REGFILE                                  /* Push registers of current task onto stack */
-    /* NatiR - TO DO - add indication of enter to Interrupt context (call it M_PSP_SET_INT_CONTEXT) */
+    M_RT_PUSH_REGFILE                                  /* Push registers of current task onto stack */
     M_PSP_CHANGE_SP_FROM_APP_TO_ISR_STACK               /* After RegFile is pushed onto task's-stack, we change sp to point to ISR-Stack */
 .endif /* D_PSP_VECT_TABLE */
     M_PSP_CALL_INT_HANDLER g_fptrIntExceptionIntHandler /* call the exception handler */
-   // NatiR - replace with appropriate macro M_PSP_CHANGE_SP_FROM_ISR_TO_APP_STACK               /* Just before pop RegFile of the interrupted task - change sp to point to current Task-Stack */
-    /* NatiR - TO DO - add indication of exit from Interrupt context (call it M_PSP_CLEAR_INT_CONTEXT) */
-    M_PSP_POP_REGFILE                                   /* Restore the registers of current task from the stack */
-    mret
+    j psp_interrupt_handled
 
 psp_m_soft_int:
 .ifdef D_PSP_VECT_TABLE
-    M_PSP_PUSH_REGFILE                                  /* Push registers of current task onto stack */
-    /* NatiR - TO DO - add indication of enter to Interrupt context (call it M_PSP_SET_INT_CONTEXT) */
+    M_RT_PUSH_REGFILE                                  /* Push registers of current task onto stack */
     M_PSP_CHANGE_SP_FROM_APP_TO_ISR_STACK               /* After RegFile is pushed onto application's-Stack, we change sp to point to ISR-Stack */
 .endif /* D_PSP_VECT_TABLE */
     M_PSP_CALL_INT_HANDLER g_fptrIntMSoftIntHandler     /* Call the interrupt handler */
-   // Nati - replace with appropriate macro     M_PSP_CHANGE_SP_FROM_ISR_TO_APP_STACK               /* Just before pop RegFile of the interrupted Task - change sp to point to current Task-Stack */
-    /* NatiR - TO DO - add indication of exit from Interrupt context (call it M_PSP_CLEAR_INT_CONTEXT) */
-    M_PSP_POP_REGFILE                                    /* Restore the registers of current task from the stack */
-    mret
+    j psp_interrupt_handled
 
 psp_m_timer_int:
 .ifdef D_PSP_VECT_TABLE
-    M_PSP_PUSH_REGFILE                                   /* Push registers of current task onto stack */
-    /* NatiR - TO DO - add indication of enter to Interrupt context (call it M_PSP_SET_INT_CONTEXT) */
+    M_RT_PUSH_REGFILE                                   /* Push registers of current task onto stack */
     M_PSP_CHANGE_SP_FROM_APP_TO_ISR_STACK                  /* After RegFile is pushed onto application's-Stack, we change sp to point to ISR-Stack */
 .endif /* D_PSP_VECT_TABLE */
     M_PSP_CALL_INT_HANDLER g_fptrIntMTimerIntHandler    /* Call the interrupt handler */
-    // Nati - replace with appropriate macro     M_PSP_CHANGE_SP_FROM_ISR_TO_APP_STACK               /* Just before pop RegFile of the interrupted task - change sp to point to current Task-Stack */
-    /* NatiR - TO DO - add indication of exit from Interrupt context (call it M_PSP_CLEAR_INT_CONTEXT) */
-    M_PSP_POP_REGFILE                                    /* Restore the registers of current task from the stack */
-    mret
+    j psp_interrupt_handled
 
 psp_m_external_int:
 .ifdef D_PSP_VECT_TABLE
-    M_PSP_PUSH_REGFILE                                   /* Push registers of current task onto stack */
-    /* NatiR - TO DO - add indication of enter to Interrupt context (call it M_PSP_SET_INT_CONTEXT) */
+    M_RT_PUSH_REGFILE                                   /* Push registers of current task onto stack */
     M_PSP_CHANGE_SP_FROM_APP_TO_ISR_STACK                  /* After RegFile is pushed onto task's-stack, we change sp to point to ISR-Stack */
 .endif /* D_PSP_VECT_TABLE */
     M_PSP_CALL_EXT_INT_HANDLER
-    // Nati - replace with appropriate macro     M_PSP_CHANGE_SP_FROM_ISR_TO_APP_STACK               /* Just before pop RegFile of the interrupted task - change sp to point to current Task-Stack */
-    /* NatiR - TO DO - add indication of exit from Interrupt context (call it M_PSP_CLEAR_INT_CONTEXT) */
-    M_PSP_POP_REGFILE                                    /* Restore the registers of current task from the stack */
-    mret
+    j psp_interrupt_handled
 
 
 .weak psp_reserved_int
@@ -139,3 +124,12 @@ psp_reserved_int:
     nop
     nop
     j 1b
+
+psp_interrupt_handled:
+    M_RT_AFTER_HANDLE rt_interrupt_leave
+    M_RT_CHECK_CONTEXT_SWITCH psp_interrupt_handler_exit
+
+psp_interrupt_handler_exit:
+    M_RT_INIT_AND_LOAD_MSTATUS
+    M_RT_POP_REGFILE                                    /* Restore the registers of current task from the stack */
+    mret
